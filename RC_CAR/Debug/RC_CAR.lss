
RC_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f86  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000ffa  2**0
                  ALLOC
  2 .stab         000013d4  00000000  00000000  00000ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000913  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_13>
  38:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_14>
  3c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 07 	call	0xf3a	; 0xf3a <main>
  74:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DC_MOTOR_voidInit>:

#include "PWM_interface.h"


void DC_MOTOR_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	//Motor1
	DIO_voidSetPinDirection(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8OUTPUT);
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	63 e0       	ldi	r22, 0x03	; 3
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8OUTPUT);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	64 e0       	ldi	r22, 0x04	; 4
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetPinDirection>
	//Motor2
	DIO_voidSetPinDirection(DC_1_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8OUTPUT);
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DC_1_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8OUTPUT);
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetPinDirection>

}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <DC_MOTOR_voidRotateCW>:

/*          DC_MOTOR Move Forward         */

void DC_MOTOR_voidRotateCW(u16 Copy_u16_Speed)
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	00 d0       	rcall	.+0      	; 0xb8 <DC_MOTOR_voidRotateCW+0x6>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
	// Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8HIGH);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	64 e0       	ldi	r22, 0x04	; 4
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	// Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8HIGH);
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	60 e0       	ldi	r22, 0x00	; 0
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_Speed);
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_Speed);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <DC_MOTOR_MovingRight>:

/*             Moving Right            */

void DC_MOTOR_MovingRight(u16 Copy_u16_SpeedRight,u16 Copy_u16_SpeedLeft)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <DC_MOTOR_MovingRight+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <DC_MOTOR_MovingRight+0x8>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	7c 83       	std	Y+4, r23	; 0x04
 114:	6b 83       	std	Y+3, r22	; 0x03
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8HIGH);
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	64 e0       	ldi	r22, 0x04	; 4
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8HIGH);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_SpeedRight);
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_SpeedLeft);
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	9c 81       	ldd	r25, Y+4	; 0x04
 14a:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <DC_MOTOR_MovingLeft>:
/*             Moving Left            */

void DC_MOTOR_MovingLeft(u16 Copy_u16_SpeedRight,u16 Copy_u16_SpeedLeft)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	00 d0       	rcall	.+0      	; 0x162 <DC_MOTOR_MovingLeft+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <DC_MOTOR_MovingLeft+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	7c 83       	std	Y+4, r23	; 0x04
 16e:	6b 83       	std	Y+3, r22	; 0x03
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8HIGH);
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8HIGH);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_SpeedRight);
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_SpeedLeft);
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <DC_MOTOR_voidRotateACW>:

/*          DC_MOTOR Move Backward          */

void DC_MOTOR_voidRotateACW(u16 Copy_u16_Speed)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <DC_MOTOR_voidRotateACW+0x6>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8LOW);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	64 e0       	ldi	r22, 0x04	; 4
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8HIGH);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	63 e0       	ldi	r22, 0x03	; 3
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8LOW);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8HIGH);
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_Speed);
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_Speed);
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <DC_1_MOTOR_voidStop>:
/*     DC_1_MOTOR Stop ------------> Rotate left       */

void DC_1_MOTOR_voidStop(u16 Copy_u16_Speed)
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	00 d0       	rcall	.+0      	; 0x20c <DC_1_MOTOR_voidStop+0x6>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8LOW);
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	40 e0       	ldi	r20, 0x00	; 0
 224:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
 228:	82 e0       	ldi	r24, 0x02	; 2
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8HIGH);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(0);
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_Speed);
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <DC_2_MOTOR_voidStop>:
/*     DC_2_MOTOR Stop  -------------> Rotate Right        */

void DC_2_MOTOR_voidStop(u16 Copy_u16_Speed)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	00 d0       	rcall	.+0      	; 0x25c <DC_2_MOTOR_voidStop+0x6>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	63 e0       	ldi	r22, 0x03	; 3
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8HIGH);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor2
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8LOW);
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_Speed);
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	9a 81       	ldd	r25, Y+2	; 0x02
 290:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(0);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	08 95       	ret

000002a6 <DC_MOTOR_voidStop>:
/*         The two DC_MOTOR Stop          */

void DC_MOTOR_voidStop(u16 Copy_u16_Speed)
{
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	00 d0       	rcall	.+0      	; 0x2ac <DC_MOTOR_voidStop+0x6>
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	9a 83       	std	Y+2, r25	; 0x02
 2b2:	89 83       	std	Y+1, r24	; 0x01
	//  Motor1
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN0,DIO_u8LOW);
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_1_MOTOR_PORT,DC_1_MOTOR_PIN1,DIO_u8LOW);
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	64 e0       	ldi	r22, 0x04	; 4
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//  Motor1
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN0,DIO_u8LOW);
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_2_MOTOR_PORT,DC_2_MOTOR_PIN1,DIO_u8LOW);
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
	//Control Speed
	PWM_voidOCRValue_0_(Copy_u16_Speed);
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	9a 81       	ldd	r25, Y+2	; 0x02
 2e0:	0e 94 23 05 	call	0xa46	; 0xa46 <PWM_voidOCRValue_0_>
	PWM_voidOCRValue_1_(Copy_u16_Speed);
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
 2e8:	0e 94 11 05 	call	0xa22	; 0xa22 <PWM_voidOCRValue_1_>

}
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	cf 91       	pop	r28
 2f2:	df 91       	pop	r29
 2f4:	08 95       	ret

000002f6 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_privet.h"
#include "DIO_register.h"

void DIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
 2f6:	df 93       	push	r29
 2f8:	cf 93       	push	r28
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	27 97       	sbiw	r28, 0x07	; 7
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	89 83       	std	Y+1, r24	; 0x01
 30c:	6a 83       	std	Y+2, r22	; 0x02
 30e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction==DIO_u8INPUT)
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	88 23       	and	r24, r24
 314:	09 f0       	breq	.+2      	; 0x318 <DIO_voidSetPinDirection+0x22>
 316:	75 c0       	rjmp	.+234    	; 0x402 <DIO_voidSetPinDirection+0x10c>
	{
		switch (Copy_u8Port)
 318:	89 81       	ldd	r24, Y+1	; 0x01
 31a:	28 2f       	mov	r18, r24
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	3f 83       	std	Y+7, r19	; 0x07
 320:	2e 83       	std	Y+6, r18	; 0x06
 322:	8e 81       	ldd	r24, Y+6	; 0x06
 324:	9f 81       	ldd	r25, Y+7	; 0x07
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	91 05       	cpc	r25, r1
 32a:	61 f1       	breq	.+88     	; 0x384 <DIO_voidSetPinDirection+0x8e>
 32c:	2e 81       	ldd	r18, Y+6	; 0x06
 32e:	3f 81       	ldd	r19, Y+7	; 0x07
 330:	23 30       	cpi	r18, 0x03	; 3
 332:	31 05       	cpc	r19, r1
 334:	34 f4       	brge	.+12     	; 0x342 <DIO_voidSetPinDirection+0x4c>
 336:	8e 81       	ldd	r24, Y+6	; 0x06
 338:	9f 81       	ldd	r25, Y+7	; 0x07
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 05       	cpc	r25, r1
 33e:	69 f0       	breq	.+26     	; 0x35a <DIO_voidSetPinDirection+0x64>
 340:	d3 c0       	rjmp	.+422    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
 342:	2e 81       	ldd	r18, Y+6	; 0x06
 344:	3f 81       	ldd	r19, Y+7	; 0x07
 346:	23 30       	cpi	r18, 0x03	; 3
 348:	31 05       	cpc	r19, r1
 34a:	89 f1       	breq	.+98     	; 0x3ae <DIO_voidSetPinDirection+0xb8>
 34c:	8e 81       	ldd	r24, Y+6	; 0x06
 34e:	9f 81       	ldd	r25, Y+7	; 0x07
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	91 05       	cpc	r25, r1
 354:	09 f4       	brne	.+2      	; 0x358 <DIO_voidSetPinDirection+0x62>
 356:	40 c0       	rjmp	.+128    	; 0x3d8 <DIO_voidSetPinDirection+0xe2>
 358:	c7 c0       	rjmp	.+398    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(DDRA , Copy_u8Pin);break;
 35a:	aa e3       	ldi	r26, 0x3A	; 58
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	ea e3       	ldi	r30, 0x3A	; 58
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_voidSetPinDirection+0x82>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_voidSetPinDirection+0x7e>
 37c:	80 95       	com	r24
 37e:	84 23       	and	r24, r20
 380:	8c 93       	st	X, r24
 382:	b2 c0       	rjmp	.+356    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : CLR_BIT(DDRB , Copy_u8Pin);break;
 384:	a7 e3       	ldi	r26, 0x37	; 55
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e7 e3       	ldi	r30, 0x37	; 55
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8a 81       	ldd	r24, Y+2	; 0x02
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_voidSetPinDirection+0xac>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_voidSetPinDirection+0xa8>
 3a6:	80 95       	com	r24
 3a8:	84 23       	and	r24, r20
 3aa:	8c 93       	st	X, r24
 3ac:	9d c0       	rjmp	.+314    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : CLR_BIT(DDRC , Copy_u8Pin);break;
 3ae:	a4 e3       	ldi	r26, 0x34	; 52
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e4 e3       	ldi	r30, 0x34	; 52
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 2e       	mov	r0, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_voidSetPinDirection+0xd6>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_voidSetPinDirection+0xd2>
 3d0:	80 95       	com	r24
 3d2:	84 23       	and	r24, r20
 3d4:	8c 93       	st	X, r24
 3d6:	88 c0       	rjmp	.+272    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : CLR_BIT(DDRD , Copy_u8Pin);break;
 3d8:	a1 e3       	ldi	r26, 0x31	; 49
 3da:	b0 e0       	ldi	r27, 0x00	; 0
 3dc:	e1 e3       	ldi	r30, 0x31	; 49
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8a 81       	ldd	r24, Y+2	; 0x02
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 2e       	mov	r0, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_voidSetPinDirection+0x100>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	0a 94       	dec	r0
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_voidSetPinDirection+0xfc>
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	8c 93       	st	X, r24
 400:	73 c0       	rjmp	.+230    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		}
	}
	else if(Copy_u8Direction==DIO_u8OUTPUT)
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	09 f0       	breq	.+2      	; 0x40a <DIO_voidSetPinDirection+0x114>
 408:	6f c0       	rjmp	.+222    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
	{
		switch (Copy_u8Port)
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	3d 83       	std	Y+5, r19	; 0x05
 412:	2c 83       	std	Y+4, r18	; 0x04
 414:	8c 81       	ldd	r24, Y+4	; 0x04
 416:	9d 81       	ldd	r25, Y+5	; 0x05
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	91 05       	cpc	r25, r1
 41c:	51 f1       	breq	.+84     	; 0x472 <DIO_voidSetPinDirection+0x17c>
 41e:	2c 81       	ldd	r18, Y+4	; 0x04
 420:	3d 81       	ldd	r19, Y+5	; 0x05
 422:	23 30       	cpi	r18, 0x03	; 3
 424:	31 05       	cpc	r19, r1
 426:	34 f4       	brge	.+12     	; 0x434 <DIO_voidSetPinDirection+0x13e>
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	9d 81       	ldd	r25, Y+5	; 0x05
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	91 05       	cpc	r25, r1
 430:	61 f0       	breq	.+24     	; 0x44a <DIO_voidSetPinDirection+0x154>
 432:	5a c0       	rjmp	.+180    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
 434:	2c 81       	ldd	r18, Y+4	; 0x04
 436:	3d 81       	ldd	r19, Y+5	; 0x05
 438:	23 30       	cpi	r18, 0x03	; 3
 43a:	31 05       	cpc	r19, r1
 43c:	71 f1       	breq	.+92     	; 0x49a <DIO_voidSetPinDirection+0x1a4>
 43e:	8c 81       	ldd	r24, Y+4	; 0x04
 440:	9d 81       	ldd	r25, Y+5	; 0x05
 442:	84 30       	cpi	r24, 0x04	; 4
 444:	91 05       	cpc	r25, r1
 446:	e9 f1       	breq	.+122    	; 0x4c2 <DIO_voidSetPinDirection+0x1cc>
 448:	4f c0       	rjmp	.+158    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(DDRA , Copy_u8Pin);break;
 44a:	aa e3       	ldi	r26, 0x3A	; 58
 44c:	b0 e0       	ldi	r27, 0x00	; 0
 44e:	ea e3       	ldi	r30, 0x3A	; 58
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	48 2f       	mov	r20, r24
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 2e       	mov	r0, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_voidSetPinDirection+0x172>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	0a 94       	dec	r0
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_voidSetPinDirection+0x16e>
 46c:	84 2b       	or	r24, r20
 46e:	8c 93       	st	X, r24
 470:	3b c0       	rjmp	.+118    	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTB : SET_BIT(DDRB , Copy_u8Pin);break;
 472:	a7 e3       	ldi	r26, 0x37	; 55
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	e7 e3       	ldi	r30, 0x37	; 55
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8a 81       	ldd	r24, Y+2	; 0x02
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_voidSetPinDirection+0x19a>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_voidSetPinDirection+0x196>
 494:	84 2b       	or	r24, r20
 496:	8c 93       	st	X, r24
 498:	27 c0       	rjmp	.+78     	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTC : SET_BIT(DDRC , Copy_u8Pin);break;
 49a:	a4 e3       	ldi	r26, 0x34	; 52
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e4 e3       	ldi	r30, 0x34	; 52
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	48 2f       	mov	r20, r24
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 2e       	mov	r0, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_voidSetPinDirection+0x1c2>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	0a 94       	dec	r0
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_voidSetPinDirection+0x1be>
 4bc:	84 2b       	or	r24, r20
 4be:	8c 93       	st	X, r24
 4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <DIO_voidSetPinDirection+0x1f2>
		case DIO_u8PORTD : SET_BIT(DDRD , Copy_u8Pin);break;
 4c2:	a1 e3       	ldi	r26, 0x31	; 49
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	e1 e3       	ldi	r30, 0x31	; 49
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	48 2f       	mov	r20, r24
 4ce:	8a 81       	ldd	r24, Y+2	; 0x02
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_voidSetPinDirection+0x1ea>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_voidSetPinDirection+0x1e6>
 4e4:	84 2b       	or	r24, r20
 4e6:	8c 93       	st	X, r24
		}

	}
}
 4e8:	27 96       	adiw	r28, 0x07	; 7
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
 502:	27 97       	sbiw	r28, 0x07	; 7
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	f8 94       	cli
 508:	de bf       	out	0x3e, r29	; 62
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	cd bf       	out	0x3d, r28	; 61
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	6a 83       	std	Y+2, r22	; 0x02
 512:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value==DIO_u8LOW)
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	88 23       	and	r24, r24
 518:	09 f0       	breq	.+2      	; 0x51c <DIO_voidSetPinValue+0x22>
 51a:	75 c0       	rjmp	.+234    	; 0x606 <DIO_voidSetPinValue+0x10c>
	{
		switch (Copy_u8Port)
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	28 2f       	mov	r18, r24
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	3f 83       	std	Y+7, r19	; 0x07
 524:	2e 83       	std	Y+6, r18	; 0x06
 526:	8e 81       	ldd	r24, Y+6	; 0x06
 528:	9f 81       	ldd	r25, Y+7	; 0x07
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	91 05       	cpc	r25, r1
 52e:	61 f1       	breq	.+88     	; 0x588 <DIO_voidSetPinValue+0x8e>
 530:	2e 81       	ldd	r18, Y+6	; 0x06
 532:	3f 81       	ldd	r19, Y+7	; 0x07
 534:	23 30       	cpi	r18, 0x03	; 3
 536:	31 05       	cpc	r19, r1
 538:	34 f4       	brge	.+12     	; 0x546 <DIO_voidSetPinValue+0x4c>
 53a:	8e 81       	ldd	r24, Y+6	; 0x06
 53c:	9f 81       	ldd	r25, Y+7	; 0x07
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	91 05       	cpc	r25, r1
 542:	69 f0       	breq	.+26     	; 0x55e <DIO_voidSetPinValue+0x64>
 544:	d3 c0       	rjmp	.+422    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
 546:	2e 81       	ldd	r18, Y+6	; 0x06
 548:	3f 81       	ldd	r19, Y+7	; 0x07
 54a:	23 30       	cpi	r18, 0x03	; 3
 54c:	31 05       	cpc	r19, r1
 54e:	89 f1       	breq	.+98     	; 0x5b2 <DIO_voidSetPinValue+0xb8>
 550:	8e 81       	ldd	r24, Y+6	; 0x06
 552:	9f 81       	ldd	r25, Y+7	; 0x07
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	91 05       	cpc	r25, r1
 558:	09 f4       	brne	.+2      	; 0x55c <DIO_voidSetPinValue+0x62>
 55a:	40 c0       	rjmp	.+128    	; 0x5dc <DIO_voidSetPinValue+0xe2>
 55c:	c7 c0       	rjmp	.+398    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : CLR_BIT(PORTA , Copy_u8Pin);break;
 55e:	ab e3       	ldi	r26, 0x3B	; 59
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	eb e3       	ldi	r30, 0x3B	; 59
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	48 2f       	mov	r20, r24
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	28 2f       	mov	r18, r24
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 2e       	mov	r0, r18
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_voidSetPinValue+0x82>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_voidSetPinValue+0x7e>
 580:	80 95       	com	r24
 582:	84 23       	and	r24, r20
 584:	8c 93       	st	X, r24
 586:	b2 c0       	rjmp	.+356    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : CLR_BIT(PORTB , Copy_u8Pin);break;
 588:	a8 e3       	ldi	r26, 0x38	; 56
 58a:	b0 e0       	ldi	r27, 0x00	; 0
 58c:	e8 e3       	ldi	r30, 0x38	; 56
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	48 2f       	mov	r20, r24
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 2e       	mov	r0, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_voidSetPinValue+0xac>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	0a 94       	dec	r0
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_voidSetPinValue+0xa8>
 5aa:	80 95       	com	r24
 5ac:	84 23       	and	r24, r20
 5ae:	8c 93       	st	X, r24
 5b0:	9d c0       	rjmp	.+314    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : CLR_BIT(PORTC , Copy_u8Pin);break;
 5b2:	a5 e3       	ldi	r26, 0x35	; 53
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	e5 e3       	ldi	r30, 0x35	; 53
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	48 2f       	mov	r20, r24
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	28 2f       	mov	r18, r24
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 2e       	mov	r0, r18
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_voidSetPinValue+0xd6>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	0a 94       	dec	r0
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_voidSetPinValue+0xd2>
 5d4:	80 95       	com	r24
 5d6:	84 23       	and	r24, r20
 5d8:	8c 93       	st	X, r24
 5da:	88 c0       	rjmp	.+272    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : CLR_BIT(PORTD , Copy_u8Pin);break;
 5dc:	a2 e3       	ldi	r26, 0x32	; 50
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	e2 e3       	ldi	r30, 0x32	; 50
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	48 2f       	mov	r20, r24
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 2e       	mov	r0, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_voidSetPinValue+0x100>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_voidSetPinValue+0xfc>
 5fe:	80 95       	com	r24
 600:	84 23       	and	r24, r20
 602:	8c 93       	st	X, r24
 604:	73 c0       	rjmp	.+230    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		}
	}
	else if(Copy_u8Value==DIO_u8HIGH)
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	09 f0       	breq	.+2      	; 0x60e <DIO_voidSetPinValue+0x114>
 60c:	6f c0       	rjmp	.+222    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
	{
		switch (Copy_u8Port)
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	28 2f       	mov	r18, r24
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	3d 83       	std	Y+5, r19	; 0x05
 616:	2c 83       	std	Y+4, r18	; 0x04
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	9d 81       	ldd	r25, Y+5	; 0x05
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	51 f1       	breq	.+84     	; 0x676 <DIO_voidSetPinValue+0x17c>
 622:	2c 81       	ldd	r18, Y+4	; 0x04
 624:	3d 81       	ldd	r19, Y+5	; 0x05
 626:	23 30       	cpi	r18, 0x03	; 3
 628:	31 05       	cpc	r19, r1
 62a:	34 f4       	brge	.+12     	; 0x638 <DIO_voidSetPinValue+0x13e>
 62c:	8c 81       	ldd	r24, Y+4	; 0x04
 62e:	9d 81       	ldd	r25, Y+5	; 0x05
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	91 05       	cpc	r25, r1
 634:	61 f0       	breq	.+24     	; 0x64e <DIO_voidSetPinValue+0x154>
 636:	5a c0       	rjmp	.+180    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
 638:	2c 81       	ldd	r18, Y+4	; 0x04
 63a:	3d 81       	ldd	r19, Y+5	; 0x05
 63c:	23 30       	cpi	r18, 0x03	; 3
 63e:	31 05       	cpc	r19, r1
 640:	71 f1       	breq	.+92     	; 0x69e <DIO_voidSetPinValue+0x1a4>
 642:	8c 81       	ldd	r24, Y+4	; 0x04
 644:	9d 81       	ldd	r25, Y+5	; 0x05
 646:	84 30       	cpi	r24, 0x04	; 4
 648:	91 05       	cpc	r25, r1
 64a:	e9 f1       	breq	.+122    	; 0x6c6 <DIO_voidSetPinValue+0x1cc>
 64c:	4f c0       	rjmp	.+158    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		{
		case DIO_u8PORTA : SET_BIT(PORTA , Copy_u8Pin);break;
 64e:	ab e3       	ldi	r26, 0x3B	; 59
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	eb e3       	ldi	r30, 0x3B	; 59
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	48 2f       	mov	r20, r24
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	02 2e       	mov	r0, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_voidSetPinValue+0x172>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_voidSetPinValue+0x16e>
 670:	84 2b       	or	r24, r20
 672:	8c 93       	st	X, r24
 674:	3b c0       	rjmp	.+118    	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTB : SET_BIT(PORTB, Copy_u8Pin);break;
 676:	a8 e3       	ldi	r26, 0x38	; 56
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e8 e3       	ldi	r30, 0x38	; 56
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	80 81       	ld	r24, Z
 680:	48 2f       	mov	r20, r24
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 2e       	mov	r0, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_voidSetPinValue+0x19a>
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	0a 94       	dec	r0
 696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_voidSetPinValue+0x196>
 698:	84 2b       	or	r24, r20
 69a:	8c 93       	st	X, r24
 69c:	27 c0       	rjmp	.+78     	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTC : SET_BIT(PORTC , Copy_u8Pin);break;
 69e:	a5 e3       	ldi	r26, 0x35	; 53
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e3       	ldi	r30, 0x35	; 53
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	48 2f       	mov	r20, r24
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 2e       	mov	r0, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_voidSetPinValue+0x1c2>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 94       	dec	r0
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_voidSetPinValue+0x1be>
 6c0:	84 2b       	or	r24, r20
 6c2:	8c 93       	st	X, r24
 6c4:	13 c0       	rjmp	.+38     	; 0x6ec <DIO_voidSetPinValue+0x1f2>
		case DIO_u8PORTD : SET_BIT(PORTD , Copy_u8Pin);break;
 6c6:	a2 e3       	ldi	r26, 0x32	; 50
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e2 e3       	ldi	r30, 0x32	; 50
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	48 2f       	mov	r20, r24
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	28 2f       	mov	r18, r24
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 2e       	mov	r0, r18
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_voidSetPinValue+0x1ea>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	0a 94       	dec	r0
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_voidSetPinValue+0x1e6>
 6e8:	84 2b       	or	r24, r20
 6ea:	8c 93       	st	X, r24
		}

	}
}
 6ec:	27 96       	adiw	r28, 0x07	; 7
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	cf 91       	pop	r28
 6fa:	df 91       	pop	r29
 6fc:	08 95       	ret

000006fe <DIO_voidSetPortDirection>:
void DIO_voidSetPortDirection(u8 Copy_u8Port,  u8 Copy_u8Direction)
{
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	00 d0       	rcall	.+0      	; 0x704 <DIO_voidSetPortDirection+0x6>
 704:	00 d0       	rcall	.+0      	; 0x706 <DIO_voidSetPortDirection+0x8>
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	89 83       	std	Y+1, r24	; 0x01
 70c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
 70e:	89 81       	ldd	r24, Y+1	; 0x01
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	3c 83       	std	Y+4, r19	; 0x04
 716:	2b 83       	std	Y+3, r18	; 0x03
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	9c 81       	ldd	r25, Y+4	; 0x04
 71c:	82 30       	cpi	r24, 0x02	; 2
 71e:	91 05       	cpc	r25, r1
 720:	d9 f0       	breq	.+54     	; 0x758 <DIO_voidSetPortDirection+0x5a>
 722:	2b 81       	ldd	r18, Y+3	; 0x03
 724:	3c 81       	ldd	r19, Y+4	; 0x04
 726:	23 30       	cpi	r18, 0x03	; 3
 728:	31 05       	cpc	r19, r1
 72a:	34 f4       	brge	.+12     	; 0x738 <DIO_voidSetPortDirection+0x3a>
 72c:	8b 81       	ldd	r24, Y+3	; 0x03
 72e:	9c 81       	ldd	r25, Y+4	; 0x04
 730:	81 30       	cpi	r24, 0x01	; 1
 732:	91 05       	cpc	r25, r1
 734:	61 f0       	breq	.+24     	; 0x74e <DIO_voidSetPortDirection+0x50>
 736:	1e c0       	rjmp	.+60     	; 0x774 <DIO_voidSetPortDirection+0x76>
 738:	2b 81       	ldd	r18, Y+3	; 0x03
 73a:	3c 81       	ldd	r19, Y+4	; 0x04
 73c:	23 30       	cpi	r18, 0x03	; 3
 73e:	31 05       	cpc	r19, r1
 740:	81 f0       	breq	.+32     	; 0x762 <DIO_voidSetPortDirection+0x64>
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	84 30       	cpi	r24, 0x04	; 4
 748:	91 05       	cpc	r25, r1
 74a:	81 f0       	breq	.+32     	; 0x76c <DIO_voidSetPortDirection+0x6e>
 74c:	13 c0       	rjmp	.+38     	; 0x774 <DIO_voidSetPortDirection+0x76>
	{
	case DIO_u8PORTA : PORTA=Copy_u8Direction ;break;
 74e:	eb e3       	ldi	r30, 0x3B	; 59
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	80 83       	st	Z, r24
 756:	0e c0       	rjmp	.+28     	; 0x774 <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTB : PORTB=Copy_u8Direction ;break;
 758:	e8 e3       	ldi	r30, 0x38	; 56
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	80 83       	st	Z, r24
 760:	09 c0       	rjmp	.+18     	; 0x774 <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTC : PORTC=Copy_u8Direction;break;
 762:	e5 e3       	ldi	r30, 0x35	; 53
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	80 83       	st	Z, r24
 76a:	04 c0       	rjmp	.+8      	; 0x774 <DIO_voidSetPortDirection+0x76>
	case DIO_u8PORTD : PORTD=Copy_u8Direction;break;
 76c:	e2 e3       	ldi	r30, 0x32	; 50
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	80 83       	st	Z, r24
	}

}
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	cf 91       	pop	r28
 77e:	df 91       	pop	r29
 780:	08 95       	ret

00000782 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
 782:	df 93       	push	r29
 784:	cf 93       	push	r28
 786:	00 d0       	rcall	.+0      	; 0x788 <DIO_voidSetPortValue+0x6>
 788:	00 d0       	rcall	.+0      	; 0x78a <DIO_voidSetPortValue+0x8>
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	6a 83       	std	Y+2, r22	; 0x02
		switch (Copy_u8Port)
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	28 2f       	mov	r18, r24
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	3c 83       	std	Y+4, r19	; 0x04
 79a:	2b 83       	std	Y+3, r18	; 0x03
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	9c 81       	ldd	r25, Y+4	; 0x04
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	91 05       	cpc	r25, r1
 7a4:	d9 f0       	breq	.+54     	; 0x7dc <DIO_voidSetPortValue+0x5a>
 7a6:	2b 81       	ldd	r18, Y+3	; 0x03
 7a8:	3c 81       	ldd	r19, Y+4	; 0x04
 7aa:	23 30       	cpi	r18, 0x03	; 3
 7ac:	31 05       	cpc	r19, r1
 7ae:	34 f4       	brge	.+12     	; 0x7bc <DIO_voidSetPortValue+0x3a>
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	9c 81       	ldd	r25, Y+4	; 0x04
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	91 05       	cpc	r25, r1
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <DIO_voidSetPortValue+0x50>
 7ba:	1e c0       	rjmp	.+60     	; 0x7f8 <DIO_voidSetPortValue+0x76>
 7bc:	2b 81       	ldd	r18, Y+3	; 0x03
 7be:	3c 81       	ldd	r19, Y+4	; 0x04
 7c0:	23 30       	cpi	r18, 0x03	; 3
 7c2:	31 05       	cpc	r19, r1
 7c4:	81 f0       	breq	.+32     	; 0x7e6 <DIO_voidSetPortValue+0x64>
 7c6:	8b 81       	ldd	r24, Y+3	; 0x03
 7c8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ca:	84 30       	cpi	r24, 0x04	; 4
 7cc:	91 05       	cpc	r25, r1
 7ce:	81 f0       	breq	.+32     	; 0x7f0 <DIO_voidSetPortValue+0x6e>
 7d0:	13 c0       	rjmp	.+38     	; 0x7f8 <DIO_voidSetPortValue+0x76>
		{
		case DIO_u8PORTA : PORTA=Copy_u8Value ;break;
 7d2:	eb e3       	ldi	r30, 0x3B	; 59
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	8a 81       	ldd	r24, Y+2	; 0x02
 7d8:	80 83       	st	Z, r24
 7da:	0e c0       	rjmp	.+28     	; 0x7f8 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB : PORTB=Copy_u8Value ;break;
 7dc:	e8 e3       	ldi	r30, 0x38	; 56
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	8a 81       	ldd	r24, Y+2	; 0x02
 7e2:	80 83       	st	Z, r24
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC : PORTC=Copy_u8Value;break;
 7e6:	e5 e3       	ldi	r30, 0x35	; 53
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	80 83       	st	Z, r24
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD : PORTD=Copy_u8Value;break;
 7f0:	e2 e3       	ldi	r30, 0x32	; 50
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	80 83       	st	Z, r24
		}
}
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	cf 91       	pop	r28
 802:	df 91       	pop	r29
 804:	08 95       	ret

00000806 <DIO_u8GETPinValue>:

u8 DIO_u8GETPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
 806:	df 93       	push	r29
 808:	cf 93       	push	r28
 80a:	00 d0       	rcall	.+0      	; 0x80c <DIO_u8GETPinValue+0x6>
 80c:	00 d0       	rcall	.+0      	; 0x80e <DIO_u8GETPinValue+0x8>
 80e:	0f 92       	push	r0
 810:	cd b7       	in	r28, 0x3d	; 61
 812:	de b7       	in	r29, 0x3e	; 62
 814:	8a 83       	std	Y+2, r24	; 0x02
 816:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result;
	switch (Copy_u8Port)
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	3d 83       	std	Y+5, r19	; 0x05
 820:	2c 83       	std	Y+4, r18	; 0x04
 822:	4c 81       	ldd	r20, Y+4	; 0x04
 824:	5d 81       	ldd	r21, Y+5	; 0x05
 826:	42 30       	cpi	r20, 0x02	; 2
 828:	51 05       	cpc	r21, r1
 82a:	41 f1       	breq	.+80     	; 0x87c <__stack+0x1d>
 82c:	8c 81       	ldd	r24, Y+4	; 0x04
 82e:	9d 81       	ldd	r25, Y+5	; 0x05
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	91 05       	cpc	r25, r1
 834:	34 f4       	brge	.+12     	; 0x842 <DIO_u8GETPinValue+0x3c>
 836:	2c 81       	ldd	r18, Y+4	; 0x04
 838:	3d 81       	ldd	r19, Y+5	; 0x05
 83a:	21 30       	cpi	r18, 0x01	; 1
 83c:	31 05       	cpc	r19, r1
 83e:	61 f0       	breq	.+24     	; 0x858 <DIO_u8GETPinValue+0x52>
 840:	52 c0       	rjmp	.+164    	; 0x8e6 <__stack+0x87>
 842:	4c 81       	ldd	r20, Y+4	; 0x04
 844:	5d 81       	ldd	r21, Y+5	; 0x05
 846:	43 30       	cpi	r20, 0x03	; 3
 848:	51 05       	cpc	r21, r1
 84a:	51 f1       	breq	.+84     	; 0x8a0 <__stack+0x41>
 84c:	8c 81       	ldd	r24, Y+4	; 0x04
 84e:	9d 81       	ldd	r25, Y+5	; 0x05
 850:	84 30       	cpi	r24, 0x04	; 4
 852:	91 05       	cpc	r25, r1
 854:	b9 f1       	breq	.+110    	; 0x8c4 <__stack+0x65>
 856:	47 c0       	rjmp	.+142    	; 0x8e6 <__stack+0x87>
	{
	case DIO_u8PORTA :  Local_u8Result=GET_BIT(PINA,Copy_u8Pin) ;break;
 858:	e9 e3       	ldi	r30, 0x39	; 57
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	28 2f       	mov	r18, r24
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	8b 81       	ldd	r24, Y+3	; 0x03
 864:	88 2f       	mov	r24, r24
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	a9 01       	movw	r20, r18
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	55 95       	asr	r21
 86e:	47 95       	ror	r20
 870:	8a 95       	dec	r24
 872:	e2 f7       	brpl	.-8      	; 0x86c <__stack+0xd>
 874:	ca 01       	movw	r24, r20
 876:	81 70       	andi	r24, 0x01	; 1
 878:	89 83       	std	Y+1, r24	; 0x01
 87a:	35 c0       	rjmp	.+106    	; 0x8e6 <__stack+0x87>
	case DIO_u8PORTB :  Local_u8Result=GET_BIT(PINB,Copy_u8Pin);break;
 87c:	e6 e3       	ldi	r30, 0x36	; 54
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	8b 81       	ldd	r24, Y+3	; 0x03
 888:	88 2f       	mov	r24, r24
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	a9 01       	movw	r20, r18
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	55 95       	asr	r21
 892:	47 95       	ror	r20
 894:	8a 95       	dec	r24
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	ca 01       	movw	r24, r20
 89a:	81 70       	andi	r24, 0x01	; 1
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	23 c0       	rjmp	.+70     	; 0x8e6 <__stack+0x87>
	case DIO_u8PORTC :  Local_u8Result=GET_BIT(PINC,Copy_u8Pin);break;
 8a0:	e3 e3       	ldi	r30, 0x33	; 51
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	28 2f       	mov	r18, r24
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	8b 81       	ldd	r24, Y+3	; 0x03
 8ac:	88 2f       	mov	r24, r24
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	a9 01       	movw	r20, r18
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	55 95       	asr	r21
 8b6:	47 95       	ror	r20
 8b8:	8a 95       	dec	r24
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	ca 01       	movw	r24, r20
 8be:	81 70       	andi	r24, 0x01	; 1
 8c0:	89 83       	std	Y+1, r24	; 0x01
 8c2:	11 c0       	rjmp	.+34     	; 0x8e6 <__stack+0x87>
	case DIO_u8PORTD :  Local_u8Result=GET_BIT(PIND,Copy_u8Pin);break;
 8c4:	e0 e3       	ldi	r30, 0x30	; 48
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	8b 81       	ldd	r24, Y+3	; 0x03
 8d0:	88 2f       	mov	r24, r24
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	a9 01       	movw	r20, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	55 95       	asr	r21
 8da:	47 95       	ror	r20
 8dc:	8a 95       	dec	r24
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	ca 01       	movw	r24, r20
 8e2:	81 70       	andi	r24, 0x01	; 1
 8e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Result;
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	cf 91       	pop	r28
 8f4:	df 91       	pop	r29
 8f6:	08 95       	ret

000008f8 <PWM_voidInit_1_>:
#include"PWM_register.h"

#include "DIO_interface.h"

void PWM_voidInit_1_(void)
{
 8f8:	df 93       	push	r29
 8fa:	cf 93       	push	r28
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
	/*  clear on compare match , set at top for channel A   */

	SET_BIT(TCCR1A,7);
 900:	af e4       	ldi	r26, 0x4F	; 79
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	ef e4       	ldi	r30, 0x4F	; 79
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	80 68       	ori	r24, 0x80	; 128
 90c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
 90e:	af e4       	ldi	r26, 0x4F	; 79
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	ef e4       	ldi	r30, 0x4F	; 79
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	8f 7b       	andi	r24, 0xBF	; 191
 91a:	8c 93       	st	X, r24

	/*   select PWM mode  */

	CLR_BIT(TCCR1A,0);
 91c:	af e4       	ldi	r26, 0x4F	; 79
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	ef e4       	ldi	r30, 0x4F	; 79
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	80 81       	ld	r24, Z
 926:	8e 7f       	andi	r24, 0xFE	; 254
 928:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
 92a:	af e4       	ldi	r26, 0x4F	; 79
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	ef e4       	ldi	r30, 0x4F	; 79
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	82 60       	ori	r24, 0x02	; 2
 936:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
 938:	ae e4       	ldi	r26, 0x4E	; 78
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	ee e4       	ldi	r30, 0x4E	; 78
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	80 61       	ori	r24, 0x10	; 16
 944:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
 946:	ae e4       	ldi	r26, 0x4E	; 78
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	ee e4       	ldi	r30, 0x4E	; 78
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	80 81       	ld	r24, Z
 950:	88 60       	ori	r24, 0x08	; 8
 952:	8c 93       	st	X, r24

  /*   Select pre_scalar  : divide by 8   */

	CLR_BIT(TCCR1B,2);
 954:	ae e4       	ldi	r26, 0x4E	; 78
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	ee e4       	ldi	r30, 0x4E	; 78
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	8b 7f       	andi	r24, 0xFB	; 251
 960:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
 962:	ae e4       	ldi	r26, 0x4E	; 78
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	ee e4       	ldi	r30, 0x4E	; 78
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	82 60       	ori	r24, 0x02	; 2
 96e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
 970:	ae e4       	ldi	r26, 0x4E	; 78
 972:	b0 e0       	ldi	r27, 0x00	; 0
 974:	ee e4       	ldi	r30, 0x4E	; 78
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	8e 7f       	andi	r24, 0xFE	; 254
 97c:	8c 93       	st	X, r24


}
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <PWM_voidInit_0_>:
void PWM_voidInit_0_(void)
{
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
	  // CLR_BIT(TCCR0,7);

/*       Select Mode => Fast PWM Mode        */

		SET_BIT(TCCR0,6);
 98c:	a3 e5       	ldi	r26, 0x53	; 83
 98e:	b0 e0       	ldi	r27, 0x00	; 0
 990:	e3 e5       	ldi	r30, 0x53	; 83
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	80 64       	ori	r24, 0x40	; 64
 998:	8c 93       	st	X, r24
		SET_BIT(TCCR0,3);
 99a:	a3 e5       	ldi	r26, 0x53	; 83
 99c:	b0 e0       	ldi	r27, 0x00	; 0
 99e:	e3 e5       	ldi	r30, 0x53	; 83
 9a0:	f0 e0       	ldi	r31, 0x00	; 0
 9a2:	80 81       	ld	r24, Z
 9a4:	88 60       	ori	r24, 0x08	; 8
 9a6:	8c 93       	st	X, r24

/*       Select HW Action On OC0Pin => Non Inverting      */

		SET_BIT(TCCR0,5);
 9a8:	a3 e5       	ldi	r26, 0x53	; 83
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	e3 e5       	ldi	r30, 0x53	; 83
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	80 62       	ori	r24, 0x20	; 32
 9b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,4);
 9b6:	a3 e5       	ldi	r26, 0x53	; 83
 9b8:	b0 e0       	ldi	r27, 0x00	; 0
 9ba:	e3 e5       	ldi	r30, 0x53	; 83
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	8f 7e       	andi	r24, 0xEF	; 239
 9c2:	8c 93       	st	X, r24

/*       Select pre_scalar  : divide by 8       */

		CLR_BIT(TCCR0,2);
 9c4:	a3 e5       	ldi	r26, 0x53	; 83
 9c6:	b0 e0       	ldi	r27, 0x00	; 0
 9c8:	e3 e5       	ldi	r30, 0x53	; 83
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	80 81       	ld	r24, Z
 9ce:	8b 7f       	andi	r24, 0xFB	; 251
 9d0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,1);
 9d2:	a3 e5       	ldi	r26, 0x53	; 83
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	e3 e5       	ldi	r30, 0x53	; 83
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	82 60       	ori	r24, 0x02	; 2
 9de:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,0);
 9e0:	a3 e5       	ldi	r26, 0x53	; 83
 9e2:	b0 e0       	ldi	r27, 0x00	; 0
 9e4:	e3 e5       	ldi	r30, 0x53	; 83
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	8e 7f       	andi	r24, 0xFE	; 254
 9ec:	8c 93       	st	X, r24

		DIO_voidSetPinDirection(DIO_u8PORTB,3,DIO_u8OUTPUT);
 9ee:	82 e0       	ldi	r24, 0x02	; 2
 9f0:	63 e0       	ldi	r22, 0x03	; 3
 9f2:	41 e0       	ldi	r20, 0x01	; 1
 9f4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_voidSetPinDirection>
}
 9f8:	cf 91       	pop	r28
 9fa:	df 91       	pop	r29
 9fc:	08 95       	ret

000009fe <PWM_voidSetTopValue_1_>:
void PWM_voidSetTopValue_1_(u16 Copy_u16Value)
{
 9fe:	df 93       	push	r29
 a00:	cf 93       	push	r28
 a02:	00 d0       	rcall	.+0      	; 0xa04 <PWM_voidSetTopValue_1_+0x6>
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	9a 83       	std	Y+2, r25	; 0x02
 a0a:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = Copy_u16Value;
 a0c:	e6 e4       	ldi	r30, 0x46	; 70
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	89 81       	ldd	r24, Y+1	; 0x01
 a12:	9a 81       	ldd	r25, Y+2	; 0x02
 a14:	91 83       	std	Z+1, r25	; 0x01
 a16:	80 83       	st	Z, r24
}
 a18:	0f 90       	pop	r0
 a1a:	0f 90       	pop	r0
 a1c:	cf 91       	pop	r28
 a1e:	df 91       	pop	r29
 a20:	08 95       	ret

00000a22 <PWM_voidOCRValue_1_>:

void PWM_voidOCRValue_1_(u16 Copy_u16Value)
{
 a22:	df 93       	push	r29
 a24:	cf 93       	push	r28
 a26:	00 d0       	rcall	.+0      	; 0xa28 <PWM_voidOCRValue_1_+0x6>
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	9a 83       	std	Y+2, r25	; 0x02
 a2e:	89 83       	std	Y+1, r24	; 0x01

	OCR1A=Copy_u16Value;
 a30:	ea e4       	ldi	r30, 0x4A	; 74
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	89 81       	ldd	r24, Y+1	; 0x01
 a36:	9a 81       	ldd	r25, Y+2	; 0x02
 a38:	91 83       	std	Z+1, r25	; 0x01
 a3a:	80 83       	st	Z, r24


}
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	cf 91       	pop	r28
 a42:	df 91       	pop	r29
 a44:	08 95       	ret

00000a46 <PWM_voidOCRValue_0_>:
void PWM_voidOCRValue_0_(u16 Copy_u16Value)
{
 a46:	df 93       	push	r29
 a48:	cf 93       	push	r28
 a4a:	00 d0       	rcall	.+0      	; 0xa4c <PWM_voidOCRValue_0_+0x6>
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62
 a50:	9a 83       	std	Y+2, r25	; 0x02
 a52:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u16Value;
 a54:	ec e5       	ldi	r30, 0x5C	; 92
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	80 83       	st	Z, r24
}
 a5c:	0f 90       	pop	r0
 a5e:	0f 90       	pop	r0
 a60:	cf 91       	pop	r28
 a62:	df 91       	pop	r29
 a64:	08 95       	ret

00000a66 <UART_voidInit>:
#define  F_CPU     8000000UL

static void (*funcptr[3])(void)={NULL,NULL,NULL};

void  UART_voidInit(void)
{
 a66:	df 93       	push	r29
 a68:	cf 93       	push	r28
 a6a:	00 d0       	rcall	.+0      	; 0xa6c <UART_voidInit+0x6>
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate=BAUD_RATE;
 a70:	87 e6       	ldi	r24, 0x67	; 103
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	9a 83       	std	Y+2, r25	; 0x02
 a76:	89 83       	std	Y+1, r24	; 0x01

//      Set BaudRate
	UBRRL = (u8) Local_u16BaudRate;
 a78:	e9 e2       	ldi	r30, 0x29	; 41
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	89 81       	ldd	r24, Y+1	; 0x01
 a7e:	80 83       	st	Z, r24
	UBRRH = (u8) (Local_u16BaudRate >>8);
 a80:	e0 e4       	ldi	r30, 0x40	; 64
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	9a 81       	ldd	r25, Y+2	; 0x02
 a88:	89 2f       	mov	r24, r25
 a8a:	99 27       	eor	r25, r25
 a8c:	80 83       	st	Z, r24

//      Set Character Size 8_bit
	CLR_BIT(UCSRA,1);
 a8e:	ab e2       	ldi	r26, 0x2B	; 43
 a90:	b0 e0       	ldi	r27, 0x00	; 0
 a92:	eb e2       	ldi	r30, 0x2B	; 43
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	8d 7f       	andi	r24, 0xFD	; 253
 a9a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,2);
 a9c:	aa e2       	ldi	r26, 0x2A	; 42
 a9e:	b0 e0       	ldi	r27, 0x00	; 0
 aa0:	ea e2       	ldi	r30, 0x2A	; 42
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	80 81       	ld	r24, Z
 aa6:	8b 7f       	andi	r24, 0xFB	; 251
 aa8:	8c 93       	st	X, r24

/*      All select in Register UCSRC -------->   (1) Character Size  (2) Mode Asynchronous Operation
         (3) 1 Stop Mode              */
	UCSRC = CONC_BIT(1,0,0,0,0,1,1,0);
 aaa:	e0 e4       	ldi	r30, 0x40	; 64
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	86 e8       	ldi	r24, 0x86	; 134
 ab0:	80 83       	st	Z, r24

//      Enable Receiver
	SET_BIT(UCSRB,4);
 ab2:	aa e2       	ldi	r26, 0x2A	; 42
 ab4:	b0 e0       	ldi	r27, 0x00	; 0
 ab6:	ea e2       	ldi	r30, 0x2A	; 42
 ab8:	f0 e0       	ldi	r31, 0x00	; 0
 aba:	80 81       	ld	r24, Z
 abc:	80 61       	ori	r24, 0x10	; 16
 abe:	8c 93       	st	X, r24

//      Enable Transmitter
	SET_BIT(UCSRB,3);
 ac0:	aa e2       	ldi	r26, 0x2A	; 42
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	ea e2       	ldi	r30, 0x2A	; 42
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	88 60       	ori	r24, 0x08	; 8
 acc:	8c 93       	st	X, r24

}
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	cf 91       	pop	r28
 ad4:	df 91       	pop	r29
 ad6:	08 95       	ret

00000ad8 <UART_voidSendData_SyncBlocking>:
void  UART_voidSendData_SyncBlocking(u8 Copy_u8Data)
{
 ad8:	df 93       	push	r29
 ada:	cf 93       	push	r28
 adc:	0f 92       	push	r0
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
 ae2:	89 83       	std	Y+1, r24	; 0x01
//      Wait until UDR is empty
	while (GET_BIT(UCSRB,5)==0);
 ae4:	ea e2       	ldi	r30, 0x2A	; 42
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	80 81       	ld	r24, Z
 aea:	82 95       	swap	r24
 aec:	86 95       	lsr	r24
 aee:	87 70       	andi	r24, 0x07	; 7
 af0:	88 2f       	mov	r24, r24
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	81 70       	andi	r24, 0x01	; 1
 af6:	90 70       	andi	r25, 0x00	; 0
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	a1 f3       	breq	.-24     	; 0xae4 <UART_voidSendData_SyncBlocking+0xc>

//   	Set Data into Tx Register and start Transmitter
	UDR=Copy_u8Data;
 afc:	ec e2       	ldi	r30, 0x2C	; 44
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	80 83       	st	Z, r24

//      Wait until UDR is empty
	while (GET_BIT(UCSRB,5)==0);
 b04:	ea e2       	ldi	r30, 0x2A	; 42
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	80 81       	ld	r24, Z
 b0a:	82 95       	swap	r24
 b0c:	86 95       	lsr	r24
 b0e:	87 70       	andi	r24, 0x07	; 7
 b10:	88 2f       	mov	r24, r24
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	81 70       	andi	r24, 0x01	; 1
 b16:	90 70       	andi	r25, 0x00	; 0
 b18:	00 97       	sbiw	r24, 0x00	; 0
 b1a:	a1 f3       	breq	.-24     	; 0xb04 <UART_voidSendData_SyncBlocking+0x2c>

//      Clear transmit interrupt flag
	SET_BIT(UCSRB,6);
 b1c:	aa e2       	ldi	r26, 0x2A	; 42
 b1e:	b0 e0       	ldi	r27, 0x00	; 0
 b20:	ea e2       	ldi	r30, 0x2A	; 42
 b22:	f0 e0       	ldi	r31, 0x00	; 0
 b24:	80 81       	ld	r24, Z
 b26:	80 64       	ori	r24, 0x40	; 64
 b28:	8c 93       	st	X, r24

}
 b2a:	0f 90       	pop	r0
 b2c:	cf 91       	pop	r28
 b2e:	df 91       	pop	r29
 b30:	08 95       	ret

00000b32 <UART_voidSendData_SyncNonBlocking>:
void  UART_voidSendData_SyncNonBlocking(u8 Copy_u8Data)
{
 b32:	df 93       	push	r29
 b34:	cf 93       	push	r28
 b36:	00 d0       	rcall	.+0      	; 0xb38 <UART_voidSendData_SyncNonBlocking+0x6>
 b38:	00 d0       	rcall	.+0      	; 0xb3a <UART_voidSendData_SyncNonBlocking+0x8>
 b3a:	0f 92       	push	r0
 b3c:	cd b7       	in	r28, 0x3d	; 61
 b3e:	de b7       	in	r29, 0x3e	; 62
 b40:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32TimeOut=0;
 b42:	19 82       	std	Y+1, r1	; 0x01
 b44:	1a 82       	std	Y+2, r1	; 0x02
 b46:	1b 82       	std	Y+3, r1	; 0x03
 b48:	1c 82       	std	Y+4, r1	; 0x04
 b4a:	17 c0       	rjmp	.+46     	; 0xb7a <UART_voidSendData_SyncNonBlocking+0x48>

//        Wait until UDR is empty
	while (GET_BIT(UCSRB,5)==0)
	{
		local_u32TimeOut++;
 b4c:	89 81       	ldd	r24, Y+1	; 0x01
 b4e:	9a 81       	ldd	r25, Y+2	; 0x02
 b50:	ab 81       	ldd	r26, Y+3	; 0x03
 b52:	bc 81       	ldd	r27, Y+4	; 0x04
 b54:	01 96       	adiw	r24, 0x01	; 1
 b56:	a1 1d       	adc	r26, r1
 b58:	b1 1d       	adc	r27, r1
 b5a:	89 83       	std	Y+1, r24	; 0x01
 b5c:	9a 83       	std	Y+2, r25	; 0x02
 b5e:	ab 83       	std	Y+3, r26	; 0x03
 b60:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
 b62:	89 81       	ldd	r24, Y+1	; 0x01
 b64:	9a 81       	ldd	r25, Y+2	; 0x02
 b66:	ab 81       	ldd	r26, Y+3	; 0x03
 b68:	bc 81       	ldd	r27, Y+4	; 0x04
 b6a:	88 38       	cpi	r24, 0x88	; 136
 b6c:	23 e1       	ldi	r18, 0x13	; 19
 b6e:	92 07       	cpc	r25, r18
 b70:	20 e0       	ldi	r18, 0x00	; 0
 b72:	a2 07       	cpc	r26, r18
 b74:	20 e0       	ldi	r18, 0x00	; 0
 b76:	b2 07       	cpc	r27, r18
 b78:	61 f0       	breq	.+24     	; 0xb92 <UART_voidSendData_SyncNonBlocking+0x60>
void  UART_voidSendData_SyncNonBlocking(u8 Copy_u8Data)
{
	u32 local_u32TimeOut=0;

//        Wait until UDR is empty
	while (GET_BIT(UCSRB,5)==0)
 b7a:	ea e2       	ldi	r30, 0x2A	; 42
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	82 95       	swap	r24
 b82:	86 95       	lsr	r24
 b84:	87 70       	andi	r24, 0x07	; 7
 b86:	88 2f       	mov	r24, r24
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	81 70       	andi	r24, 0x01	; 1
 b8c:	90 70       	andi	r25, 0x00	; 0
 b8e:	00 97       	sbiw	r24, 0x00	; 0
 b90:	e9 f2       	breq	.-70     	; 0xb4c <UART_voidSendData_SyncNonBlocking+0x1a>
		{
			break;
		}
	}

	if (local_u32TimeOut !=NON_BLOCKING_TIME_OUT )
 b92:	89 81       	ldd	r24, Y+1	; 0x01
 b94:	9a 81       	ldd	r25, Y+2	; 0x02
 b96:	ab 81       	ldd	r26, Y+3	; 0x03
 b98:	bc 81       	ldd	r27, Y+4	; 0x04
 b9a:	88 38       	cpi	r24, 0x88	; 136
 b9c:	23 e1       	ldi	r18, 0x13	; 19
 b9e:	92 07       	cpc	r25, r18
 ba0:	20 e0       	ldi	r18, 0x00	; 0
 ba2:	a2 07       	cpc	r26, r18
 ba4:	20 e0       	ldi	r18, 0x00	; 0
 ba6:	b2 07       	cpc	r27, r18
 ba8:	99 f1       	breq	.+102    	; 0xc10 <UART_voidSendData_SyncNonBlocking+0xde>
		{
			local_u32TimeOut=0;
 baa:	19 82       	std	Y+1, r1	; 0x01
 bac:	1a 82       	std	Y+2, r1	; 0x02
 bae:	1b 82       	std	Y+3, r1	; 0x03
 bb0:	1c 82       	std	Y+4, r1	; 0x04
	       // 	  Set Data into Tx Register and start Transmitter
			UDR=Copy_u8Data;
 bb2:	ec e2       	ldi	r30, 0x2C	; 44
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	8d 81       	ldd	r24, Y+5	; 0x05
 bb8:	80 83       	st	Z, r24
 bba:	17 c0       	rjmp	.+46     	; 0xbea <UART_voidSendData_SyncNonBlocking+0xb8>
			while (GET_BIT(UCSRB,5)==0)
			{
				local_u32TimeOut++;
 bbc:	89 81       	ldd	r24, Y+1	; 0x01
 bbe:	9a 81       	ldd	r25, Y+2	; 0x02
 bc0:	ab 81       	ldd	r26, Y+3	; 0x03
 bc2:	bc 81       	ldd	r27, Y+4	; 0x04
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	a1 1d       	adc	r26, r1
 bc8:	b1 1d       	adc	r27, r1
 bca:	89 83       	std	Y+1, r24	; 0x01
 bcc:	9a 83       	std	Y+2, r25	; 0x02
 bce:	ab 83       	std	Y+3, r26	; 0x03
 bd0:	bc 83       	std	Y+4, r27	; 0x04
				if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
 bd2:	89 81       	ldd	r24, Y+1	; 0x01
 bd4:	9a 81       	ldd	r25, Y+2	; 0x02
 bd6:	ab 81       	ldd	r26, Y+3	; 0x03
 bd8:	bc 81       	ldd	r27, Y+4	; 0x04
 bda:	88 38       	cpi	r24, 0x88	; 136
 bdc:	23 e1       	ldi	r18, 0x13	; 19
 bde:	92 07       	cpc	r25, r18
 be0:	20 e0       	ldi	r18, 0x00	; 0
 be2:	a2 07       	cpc	r26, r18
 be4:	20 e0       	ldi	r18, 0x00	; 0
 be6:	b2 07       	cpc	r27, r18
 be8:	61 f0       	breq	.+24     	; 0xc02 <UART_voidSendData_SyncNonBlocking+0xd0>
	if (local_u32TimeOut !=NON_BLOCKING_TIME_OUT )
		{
			local_u32TimeOut=0;
	       // 	  Set Data into Tx Register and start Transmitter
			UDR=Copy_u8Data;
			while (GET_BIT(UCSRB,5)==0)
 bea:	ea e2       	ldi	r30, 0x2A	; 42
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	80 81       	ld	r24, Z
 bf0:	82 95       	swap	r24
 bf2:	86 95       	lsr	r24
 bf4:	87 70       	andi	r24, 0x07	; 7
 bf6:	88 2f       	mov	r24, r24
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	81 70       	andi	r24, 0x01	; 1
 bfc:	90 70       	andi	r25, 0x00	; 0
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	e9 f2       	breq	.-70     	; 0xbbc <UART_voidSendData_SyncNonBlocking+0x8a>
				{
					break;
				}
			}
			//   Clear transmit interrupt flag
			SET_BIT(UCSRB,6);
 c02:	aa e2       	ldi	r26, 0x2A	; 42
 c04:	b0 e0       	ldi	r27, 0x00	; 0
 c06:	ea e2       	ldi	r30, 0x2A	; 42
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	80 64       	ori	r24, 0x40	; 64
 c0e:	8c 93       	st	X, r24


		}
}
 c10:	0f 90       	pop	r0
 c12:	0f 90       	pop	r0
 c14:	0f 90       	pop	r0
 c16:	0f 90       	pop	r0
 c18:	0f 90       	pop	r0
 c1a:	cf 91       	pop	r28
 c1c:	df 91       	pop	r29
 c1e:	08 95       	ret

00000c20 <UART_voidSendString_SyncNonBlocking>:
void  UART_voidSendString_SyncNonBlocking(u8 *u8String)
{
 c20:	df 93       	push	r29
 c22:	cf 93       	push	r28
 c24:	00 d0       	rcall	.+0      	; 0xc26 <UART_voidSendString_SyncNonBlocking+0x6>
 c26:	cd b7       	in	r28, 0x3d	; 61
 c28:	de b7       	in	r29, 0x3e	; 62
 c2a:	9a 83       	std	Y+2, r25	; 0x02
 c2c:	89 83       	std	Y+1, r24	; 0x01
 c2e:	0e c0       	rjmp	.+28     	; 0xc4c <UART_voidSendString_SyncNonBlocking+0x2c>
	while (*u8String > 0)
	{
		UART_voidSendString_SyncNonBlocking(*u8String++);
 c30:	e9 81       	ldd	r30, Y+1	; 0x01
 c32:	fa 81       	ldd	r31, Y+2	; 0x02
 c34:	80 81       	ld	r24, Z
 c36:	88 2f       	mov	r24, r24
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	9c 01       	movw	r18, r24
 c3c:	89 81       	ldd	r24, Y+1	; 0x01
 c3e:	9a 81       	ldd	r25, Y+2	; 0x02
 c40:	01 96       	adiw	r24, 0x01	; 1
 c42:	9a 83       	std	Y+2, r25	; 0x02
 c44:	89 83       	std	Y+1, r24	; 0x01
 c46:	c9 01       	movw	r24, r18
 c48:	0e 94 10 06 	call	0xc20	; 0xc20 <UART_voidSendString_SyncNonBlocking>

		}
}
void  UART_voidSendString_SyncNonBlocking(u8 *u8String)
{
	while (*u8String > 0)
 c4c:	e9 81       	ldd	r30, Y+1	; 0x01
 c4e:	fa 81       	ldd	r31, Y+2	; 0x02
 c50:	80 81       	ld	r24, Z
 c52:	88 23       	and	r24, r24
 c54:	69 f7       	brne	.-38     	; 0xc30 <UART_voidSendString_SyncNonBlocking+0x10>
	{
		UART_voidSendString_SyncNonBlocking(*u8String++);
	}
}
 c56:	0f 90       	pop	r0
 c58:	0f 90       	pop	r0
 c5a:	cf 91       	pop	r28
 c5c:	df 91       	pop	r29
 c5e:	08 95       	ret

00000c60 <UART_receiveString>:
void UART_receiveString(u8 *u8String)
{
 c60:	0f 93       	push	r16
 c62:	1f 93       	push	r17
 c64:	df 93       	push	r29
 c66:	cf 93       	push	r28
 c68:	00 d0       	rcall	.+0      	; 0xc6a <UART_receiveString+0xa>
 c6a:	0f 92       	push	r0
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
 c70:	9b 83       	std	Y+3, r25	; 0x03
 c72:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
 c74:	19 82       	std	Y+1, r1	; 0x01
	u8String[i] = UART_voidReceiveData_Async();
 c76:	89 81       	ldd	r24, Y+1	; 0x01
 c78:	28 2f       	mov	r18, r24
 c7a:	30 e0       	ldi	r19, 0x00	; 0
 c7c:	8a 81       	ldd	r24, Y+2	; 0x02
 c7e:	9b 81       	ldd	r25, Y+3	; 0x03
 c80:	8c 01       	movw	r16, r24
 c82:	02 0f       	add	r16, r18
 c84:	13 1f       	adc	r17, r19
 c86:	0e 94 95 06 	call	0xd2a	; 0xd2a <UART_voidReceiveData_Async>
 c8a:	f8 01       	movw	r30, r16
 c8c:	80 83       	st	Z, r24
 c8e:	0f c0       	rjmp	.+30     	; 0xcae <UART_receiveString+0x4e>
	while(u8String[i] != '#')
	{
		i++;
 c90:	89 81       	ldd	r24, Y+1	; 0x01
 c92:	8f 5f       	subi	r24, 0xFF	; 255
 c94:	89 83       	std	Y+1, r24	; 0x01
		u8String[i] = UART_voidReceiveData_Async();
 c96:	89 81       	ldd	r24, Y+1	; 0x01
 c98:	28 2f       	mov	r18, r24
 c9a:	30 e0       	ldi	r19, 0x00	; 0
 c9c:	8a 81       	ldd	r24, Y+2	; 0x02
 c9e:	9b 81       	ldd	r25, Y+3	; 0x03
 ca0:	8c 01       	movw	r16, r24
 ca2:	02 0f       	add	r16, r18
 ca4:	13 1f       	adc	r17, r19
 ca6:	0e 94 95 06 	call	0xd2a	; 0xd2a <UART_voidReceiveData_Async>
 caa:	f8 01       	movw	r30, r16
 cac:	80 83       	st	Z, r24
}
void UART_receiveString(u8 *u8String)
{
	u8 i = 0;
	u8String[i] = UART_voidReceiveData_Async();
	while(u8String[i] != '#')
 cae:	89 81       	ldd	r24, Y+1	; 0x01
 cb0:	28 2f       	mov	r18, r24
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	8a 81       	ldd	r24, Y+2	; 0x02
 cb6:	9b 81       	ldd	r25, Y+3	; 0x03
 cb8:	fc 01       	movw	r30, r24
 cba:	e2 0f       	add	r30, r18
 cbc:	f3 1f       	adc	r31, r19
 cbe:	80 81       	ld	r24, Z
 cc0:	83 32       	cpi	r24, 0x23	; 35
 cc2:	31 f7       	brne	.-52     	; 0xc90 <UART_receiveString+0x30>
	{
		i++;
		u8String[i] = UART_voidReceiveData_Async();
	}
	u8String[i] = '\0';
 cc4:	89 81       	ldd	r24, Y+1	; 0x01
 cc6:	28 2f       	mov	r18, r24
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	8a 81       	ldd	r24, Y+2	; 0x02
 ccc:	9b 81       	ldd	r25, Y+3	; 0x03
 cce:	fc 01       	movw	r30, r24
 cd0:	e2 0f       	add	r30, r18
 cd2:	f3 1f       	adc	r31, r19
 cd4:	10 82       	st	Z, r1
}
 cd6:	0f 90       	pop	r0
 cd8:	0f 90       	pop	r0
 cda:	0f 90       	pop	r0
 cdc:	cf 91       	pop	r28
 cde:	df 91       	pop	r29
 ce0:	1f 91       	pop	r17
 ce2:	0f 91       	pop	r16
 ce4:	08 95       	ret

00000ce6 <UART_voidSendData_Async>:
void  UART_voidSendData_Async(u8 Copy_u8Data)
{
 ce6:	df 93       	push	r29
 ce8:	cf 93       	push	r28
 cea:	0f 92       	push	r0
 cec:	cd b7       	in	r28, 0x3d	; 61
 cee:	de b7       	in	r29, 0x3e	; 62
 cf0:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(UCSRA,7)==0)
 cf2:	eb e2       	ldi	r30, 0x2B	; 43
 cf4:	f0 e0       	ldi	r31, 0x00	; 0
 cf6:	80 81       	ld	r24, Z
 cf8:	88 23       	and	r24, r24
 cfa:	24 f0       	brlt	.+8      	; 0xd04 <UART_voidSendData_Async+0x1e>
	{
		UDR = Copy_u8Data;
 cfc:	ec e2       	ldi	r30, 0x2C	; 44
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	89 81       	ldd	r24, Y+1	; 0x01
 d02:	80 83       	st	Z, r24
	}
}
 d04:	0f 90       	pop	r0
 d06:	cf 91       	pop	r28
 d08:	df 91       	pop	r29
 d0a:	08 95       	ret

00000d0c <UART_voidReceiveData_SyncBlocking>:




u8  UART_voidReceiveData_SyncBlocking(void)
{
 d0c:	df 93       	push	r29
 d0e:	cf 93       	push	r28
 d10:	cd b7       	in	r28, 0x3d	; 61
 d12:	de b7       	in	r29, 0x3e	; 62
//        Wait for Rx flag
	while (GET_BIT(UCSRA,7)==0);
 d14:	eb e2       	ldi	r30, 0x2B	; 43
 d16:	f0 e0       	ldi	r31, 0x00	; 0
 d18:	80 81       	ld	r24, Z
 d1a:	88 23       	and	r24, r24
 d1c:	dc f7       	brge	.-10     	; 0xd14 <UART_voidReceiveData_SyncBlocking+0x8>
	return UDR ;
 d1e:	ec e2       	ldi	r30, 0x2C	; 44
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	80 81       	ld	r24, Z
}
 d24:	cf 91       	pop	r28
 d26:	df 91       	pop	r29
 d28:	08 95       	ret

00000d2a <UART_voidReceiveData_Async>:
u8  UART_voidReceiveData_Async(void)
{
 d2a:	df 93       	push	r29
 d2c:	cf 93       	push	r28
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
 d32:	ec e2       	ldi	r30, 0x2C	; 44
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	80 81       	ld	r24, Z
}
 d38:	cf 91       	pop	r28
 d3a:	df 91       	pop	r29
 d3c:	08 95       	ret

00000d3e <UART_voidReceiveData_AsyncNonBlocking>:
u8  UART_voidReceiveData_AsyncNonBlocking(void)
{
 d3e:	df 93       	push	r29
 d40:	cf 93       	push	r28
 d42:	00 d0       	rcall	.+0      	; 0xd44 <UART_voidReceiveData_AsyncNonBlocking+0x6>
 d44:	00 d0       	rcall	.+0      	; 0xd46 <UART_voidReceiveData_AsyncNonBlocking+0x8>
 d46:	0f 92       	push	r0
 d48:	cd b7       	in	r28, 0x3d	; 61
 d4a:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceiveData = NON_VALUE_RETURNED;
 d4c:	8f ef       	ldi	r24, 0xFF	; 255
 d4e:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32TimeOut = 0;
 d50:	19 82       	std	Y+1, r1	; 0x01
 d52:	1a 82       	std	Y+2, r1	; 0x02
 d54:	1b 82       	std	Y+3, r1	; 0x03
 d56:	1c 82       	std	Y+4, r1	; 0x04
 d58:	17 c0       	rjmp	.+46     	; 0xd88 <UART_voidReceiveData_AsyncNonBlocking+0x4a>

//         Wait for Rx flag
	while (GET_BIT(UCSRA,7)==0)
	{
		local_u32TimeOut++;
 d5a:	89 81       	ldd	r24, Y+1	; 0x01
 d5c:	9a 81       	ldd	r25, Y+2	; 0x02
 d5e:	ab 81       	ldd	r26, Y+3	; 0x03
 d60:	bc 81       	ldd	r27, Y+4	; 0x04
 d62:	01 96       	adiw	r24, 0x01	; 1
 d64:	a1 1d       	adc	r26, r1
 d66:	b1 1d       	adc	r27, r1
 d68:	89 83       	std	Y+1, r24	; 0x01
 d6a:	9a 83       	std	Y+2, r25	; 0x02
 d6c:	ab 83       	std	Y+3, r26	; 0x03
 d6e:	bc 83       	std	Y+4, r27	; 0x04
		if (local_u32TimeOut == NON_BLOCKING_TIME_OUT)
 d70:	89 81       	ldd	r24, Y+1	; 0x01
 d72:	9a 81       	ldd	r25, Y+2	; 0x02
 d74:	ab 81       	ldd	r26, Y+3	; 0x03
 d76:	bc 81       	ldd	r27, Y+4	; 0x04
 d78:	88 38       	cpi	r24, 0x88	; 136
 d7a:	23 e1       	ldi	r18, 0x13	; 19
 d7c:	92 07       	cpc	r25, r18
 d7e:	20 e0       	ldi	r18, 0x00	; 0
 d80:	a2 07       	cpc	r26, r18
 d82:	20 e0       	ldi	r18, 0x00	; 0
 d84:	b2 07       	cpc	r27, r18
 d86:	29 f0       	breq	.+10     	; 0xd92 <UART_voidReceiveData_AsyncNonBlocking+0x54>
{
	u8 local_u8ReceiveData = NON_VALUE_RETURNED;
	u32 local_u32TimeOut = 0;

//         Wait for Rx flag
	while (GET_BIT(UCSRA,7)==0)
 d88:	eb e2       	ldi	r30, 0x2B	; 43
 d8a:	f0 e0       	ldi	r31, 0x00	; 0
 d8c:	80 81       	ld	r24, Z
 d8e:	88 23       	and	r24, r24
 d90:	24 f7       	brge	.-56     	; 0xd5a <UART_voidReceiveData_AsyncNonBlocking+0x1c>
		if (local_u32TimeOut == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if(local_u32TimeOut != NON_BLOCKING_TIME_OUT)
 d92:	89 81       	ldd	r24, Y+1	; 0x01
 d94:	9a 81       	ldd	r25, Y+2	; 0x02
 d96:	ab 81       	ldd	r26, Y+3	; 0x03
 d98:	bc 81       	ldd	r27, Y+4	; 0x04
 d9a:	88 38       	cpi	r24, 0x88	; 136
 d9c:	23 e1       	ldi	r18, 0x13	; 19
 d9e:	92 07       	cpc	r25, r18
 da0:	20 e0       	ldi	r18, 0x00	; 0
 da2:	a2 07       	cpc	r26, r18
 da4:	20 e0       	ldi	r18, 0x00	; 0
 da6:	b2 07       	cpc	r27, r18
 da8:	21 f0       	breq	.+8      	; 0xdb2 <UART_voidReceiveData_AsyncNonBlocking+0x74>
	{
		local_u8ReceiveData = UDR;
 daa:	ec e2       	ldi	r30, 0x2C	; 44
 dac:	f0 e0       	ldi	r31, 0x00	; 0
 dae:	80 81       	ld	r24, Z
 db0:	8d 83       	std	Y+5, r24	; 0x05
	}
	return local_u8ReceiveData ;
 db2:	8d 81       	ldd	r24, Y+5	; 0x05

}
 db4:	0f 90       	pop	r0
 db6:	0f 90       	pop	r0
 db8:	0f 90       	pop	r0
 dba:	0f 90       	pop	r0
 dbc:	0f 90       	pop	r0
 dbe:	cf 91       	pop	r28
 dc0:	df 91       	pop	r29
 dc2:	08 95       	ret

00000dc4 <UART_voidSetCallBack>:
void UART_voidSetCallBack(UART_INTERRUPTS InterruptSource,void(*PtoFunc)(void))
{
 dc4:	df 93       	push	r29
 dc6:	cf 93       	push	r28
 dc8:	00 d0       	rcall	.+0      	; 0xdca <UART_voidSetCallBack+0x6>
 dca:	0f 92       	push	r0
 dcc:	cd b7       	in	r28, 0x3d	; 61
 dce:	de b7       	in	r29, 0x3e	; 62
 dd0:	89 83       	std	Y+1, r24	; 0x01
 dd2:	7b 83       	std	Y+3, r23	; 0x03
 dd4:	6a 83       	std	Y+2, r22	; 0x02
	if ((InterruptSource <= UART_Tx_INTERRUPT)&&(PtoFunc!=NULL))
 dd6:	89 81       	ldd	r24, Y+1	; 0x01
 dd8:	83 30       	cpi	r24, 0x03	; 3
 dda:	80 f4       	brcc	.+32     	; 0xdfc <UART_voidSetCallBack+0x38>
 ddc:	8a 81       	ldd	r24, Y+2	; 0x02
 dde:	9b 81       	ldd	r25, Y+3	; 0x03
 de0:	00 97       	sbiw	r24, 0x00	; 0
 de2:	61 f0       	breq	.+24     	; 0xdfc <UART_voidSetCallBack+0x38>
	{
		funcptr[InterruptSource] = PtoFunc;
 de4:	89 81       	ldd	r24, Y+1	; 0x01
 de6:	88 2f       	mov	r24, r24
 de8:	90 e0       	ldi	r25, 0x00	; 0
 dea:	88 0f       	add	r24, r24
 dec:	99 1f       	adc	r25, r25
 dee:	fc 01       	movw	r30, r24
 df0:	e0 5a       	subi	r30, 0xA0	; 160
 df2:	ff 4f       	sbci	r31, 0xFF	; 255
 df4:	8a 81       	ldd	r24, Y+2	; 0x02
 df6:	9b 81       	ldd	r25, Y+3	; 0x03
 df8:	91 83       	std	Z+1, r25	; 0x01
 dfa:	80 83       	st	Z, r24
	}
}
 dfc:	0f 90       	pop	r0
 dfe:	0f 90       	pop	r0
 e00:	0f 90       	pop	r0
 e02:	cf 91       	pop	r28
 e04:	df 91       	pop	r29
 e06:	08 95       	ret

00000e08 <__vector_13>:

void __vector_13(void)
{
 e08:	1f 92       	push	r1
 e0a:	0f 92       	push	r0
 e0c:	0f b6       	in	r0, 0x3f	; 63
 e0e:	0f 92       	push	r0
 e10:	11 24       	eor	r1, r1
 e12:	2f 93       	push	r18
 e14:	3f 93       	push	r19
 e16:	4f 93       	push	r20
 e18:	5f 93       	push	r21
 e1a:	6f 93       	push	r22
 e1c:	7f 93       	push	r23
 e1e:	8f 93       	push	r24
 e20:	9f 93       	push	r25
 e22:	af 93       	push	r26
 e24:	bf 93       	push	r27
 e26:	ef 93       	push	r30
 e28:	ff 93       	push	r31
 e2a:	df 93       	push	r29
 e2c:	cf 93       	push	r28
 e2e:	cd b7       	in	r28, 0x3d	; 61
 e30:	de b7       	in	r29, 0x3e	; 62
	if(funcptr[UART_Rx_INTERRUPT]!=NULL)
 e32:	80 91 60 00 	lds	r24, 0x0060
 e36:	90 91 61 00 	lds	r25, 0x0061
 e3a:	00 97       	sbiw	r24, 0x00	; 0
 e3c:	29 f0       	breq	.+10     	; 0xe48 <__vector_13+0x40>
	{
		funcptr[UART_Rx_INTERRUPT]();
 e3e:	e0 91 60 00 	lds	r30, 0x0060
 e42:	f0 91 61 00 	lds	r31, 0x0061
 e46:	09 95       	icall
	}
}
 e48:	cf 91       	pop	r28
 e4a:	df 91       	pop	r29
 e4c:	ff 91       	pop	r31
 e4e:	ef 91       	pop	r30
 e50:	bf 91       	pop	r27
 e52:	af 91       	pop	r26
 e54:	9f 91       	pop	r25
 e56:	8f 91       	pop	r24
 e58:	7f 91       	pop	r23
 e5a:	6f 91       	pop	r22
 e5c:	5f 91       	pop	r21
 e5e:	4f 91       	pop	r20
 e60:	3f 91       	pop	r19
 e62:	2f 91       	pop	r18
 e64:	0f 90       	pop	r0
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	0f 90       	pop	r0
 e6a:	1f 90       	pop	r1
 e6c:	18 95       	reti

00000e6e <__vector_14>:
void __vector_14(void)
{
 e6e:	1f 92       	push	r1
 e70:	0f 92       	push	r0
 e72:	0f b6       	in	r0, 0x3f	; 63
 e74:	0f 92       	push	r0
 e76:	11 24       	eor	r1, r1
 e78:	2f 93       	push	r18
 e7a:	3f 93       	push	r19
 e7c:	4f 93       	push	r20
 e7e:	5f 93       	push	r21
 e80:	6f 93       	push	r22
 e82:	7f 93       	push	r23
 e84:	8f 93       	push	r24
 e86:	9f 93       	push	r25
 e88:	af 93       	push	r26
 e8a:	bf 93       	push	r27
 e8c:	ef 93       	push	r30
 e8e:	ff 93       	push	r31
 e90:	df 93       	push	r29
 e92:	cf 93       	push	r28
 e94:	cd b7       	in	r28, 0x3d	; 61
 e96:	de b7       	in	r29, 0x3e	; 62
	if(funcptr[UART_UDRE_INTERRUPT]!=NULL)
 e98:	80 91 62 00 	lds	r24, 0x0062
 e9c:	90 91 63 00 	lds	r25, 0x0063
 ea0:	00 97       	sbiw	r24, 0x00	; 0
 ea2:	29 f0       	breq	.+10     	; 0xeae <__vector_14+0x40>
		{
			funcptr[UART_UDRE_INTERRUPT]();
 ea4:	e0 91 62 00 	lds	r30, 0x0062
 ea8:	f0 91 63 00 	lds	r31, 0x0063
 eac:	09 95       	icall
		}
}
 eae:	cf 91       	pop	r28
 eb0:	df 91       	pop	r29
 eb2:	ff 91       	pop	r31
 eb4:	ef 91       	pop	r30
 eb6:	bf 91       	pop	r27
 eb8:	af 91       	pop	r26
 eba:	9f 91       	pop	r25
 ebc:	8f 91       	pop	r24
 ebe:	7f 91       	pop	r23
 ec0:	6f 91       	pop	r22
 ec2:	5f 91       	pop	r21
 ec4:	4f 91       	pop	r20
 ec6:	3f 91       	pop	r19
 ec8:	2f 91       	pop	r18
 eca:	0f 90       	pop	r0
 ecc:	0f be       	out	0x3f, r0	; 63
 ece:	0f 90       	pop	r0
 ed0:	1f 90       	pop	r1
 ed2:	18 95       	reti

00000ed4 <__vector_15>:
void __vector_15(void)
{
 ed4:	1f 92       	push	r1
 ed6:	0f 92       	push	r0
 ed8:	0f b6       	in	r0, 0x3f	; 63
 eda:	0f 92       	push	r0
 edc:	11 24       	eor	r1, r1
 ede:	2f 93       	push	r18
 ee0:	3f 93       	push	r19
 ee2:	4f 93       	push	r20
 ee4:	5f 93       	push	r21
 ee6:	6f 93       	push	r22
 ee8:	7f 93       	push	r23
 eea:	8f 93       	push	r24
 eec:	9f 93       	push	r25
 eee:	af 93       	push	r26
 ef0:	bf 93       	push	r27
 ef2:	ef 93       	push	r30
 ef4:	ff 93       	push	r31
 ef6:	df 93       	push	r29
 ef8:	cf 93       	push	r28
 efa:	cd b7       	in	r28, 0x3d	; 61
 efc:	de b7       	in	r29, 0x3e	; 62
	if(funcptr[UART_Tx_INTERRUPT]!=NULL)
 efe:	80 91 64 00 	lds	r24, 0x0064
 f02:	90 91 65 00 	lds	r25, 0x0065
 f06:	00 97       	sbiw	r24, 0x00	; 0
 f08:	29 f0       	breq	.+10     	; 0xf14 <__vector_15+0x40>
		{
			funcptr[UART_Tx_INTERRUPT]();
 f0a:	e0 91 64 00 	lds	r30, 0x0064
 f0e:	f0 91 65 00 	lds	r31, 0x0065
 f12:	09 95       	icall
		}
}
 f14:	cf 91       	pop	r28
 f16:	df 91       	pop	r29
 f18:	ff 91       	pop	r31
 f1a:	ef 91       	pop	r30
 f1c:	bf 91       	pop	r27
 f1e:	af 91       	pop	r26
 f20:	9f 91       	pop	r25
 f22:	8f 91       	pop	r24
 f24:	7f 91       	pop	r23
 f26:	6f 91       	pop	r22
 f28:	5f 91       	pop	r21
 f2a:	4f 91       	pop	r20
 f2c:	3f 91       	pop	r19
 f2e:	2f 91       	pop	r18
 f30:	0f 90       	pop	r0
 f32:	0f be       	out	0x3f, r0	; 63
 f34:	0f 90       	pop	r0
 f36:	1f 90       	pop	r1
 f38:	18 95       	reti

00000f3a <main>:
#include"UART_interface.h"
#include"DIO_interface.h"


int main(void)
{
 f3a:	df 93       	push	r29
 f3c:	cf 93       	push	r28
 f3e:	0f 92       	push	r0
 f40:	cd b7       	in	r28, 0x3d	; 61
 f42:	de b7       	in	r29, 0x3e	; 62

	    char Data_in;
	    DIO_voidSetPortDirection(DIO_u8PORTA,0b11111111);
 f44:	81 e0       	ldi	r24, 0x01	; 1
 f46:	6f ef       	ldi	r22, 0xFF	; 255
 f48:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPortDirection>
		DIO_voidSetPortDirection(DIO_u8PORTD,0b00000010) ;/* make PORT as output port */
 f4c:	84 e0       	ldi	r24, 0x04	; 4
 f4e:	62 e0       	ldi	r22, 0x02	; 2
 f50:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DIO_voidSetPortDirection>
		UART_voidInit();	/* initialize USART with 9600 baud rate */
 f54:	0e 94 33 05 	call	0xa66	; 0xa66 <UART_voidInit>

		Data_in = UART_voidReceiveData_Async();  /* receive data from Bluetooth device*/
 f58:	0e 94 95 06 	call	0xd2a	; 0xd2a <UART_voidReceiveData_Async>
 f5c:	89 83       	std	Y+1, r24	; 0x01
		while(1)
		{

			if(Data_in =='F')
 f5e:	89 81       	ldd	r24, Y+1	; 0x01
 f60:	86 34       	cpi	r24, 0x46	; 70
 f62:	31 f4       	brne	.+12     	; 0xf70 <main+0x36>
			{
				DIO_voidSetPinValue(DIO_u8PORTA,0,1);	/* Turn ON LED */
 f64:	81 e0       	ldi	r24, 0x01	; 1
 f66:	60 e0       	ldi	r22, 0x00	; 0
 f68:	41 e0       	ldi	r20, 0x01	; 1
 f6a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
 f6e:	f7 cf       	rjmp	.-18     	; 0xf5e <main+0x24>

			}
			else if(Data_in =='B')
 f70:	89 81       	ldd	r24, Y+1	; 0x01
 f72:	82 34       	cpi	r24, 0x42	; 66
 f74:	a1 f7       	brne	.-24     	; 0xf5e <main+0x24>
			{
				DIO_voidSetPinValue(DIO_u8PORTA,1,1);	/* Turn ON LED */
 f76:	81 e0       	ldi	r24, 0x01	; 1
 f78:	61 e0       	ldi	r22, 0x01	; 1
 f7a:	41 e0       	ldi	r20, 0x01	; 1
 f7c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <DIO_voidSetPinValue>
 f80:	ee cf       	rjmp	.-36     	; 0xf5e <main+0x24>

00000f82 <_exit>:
 f82:	f8 94       	cli

00000f84 <__stop_program>:
 f84:	ff cf       	rjmp	.-2      	; 0xf84 <__stop_program>
